import json
import pandas as pd
from subgrounds.subgrounds import Subgrounds
from web3 import Web3

def main():
    # web3 = Web3(Web3.HTTPProvider('WEB3_API'))

    # address to check
    BEANSTALK = '0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5'
    BEAN_ERC20 = '0xBEA0000029AD1c77D3d5D23Ba2D8893dB9d1Efab'
    BEAN3CRV = '0xc9C32cd16Bf7eFB85Ff14e0c8603cc90F6F2eE49'
    URBEAN =  '0x1BEA0050E63e05FBb5D8BA2f10cf5800B6224449'
    URBEAN3CRV = '0x1BEA3CcD22F4EBd3d37d731BA31Eeca95713716D'
    DAI = '0x6B175474E89094C44Da98b954EedeAC495271d0F'
    USDT = '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    USDC = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
    THREECRV = '0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490'

    ERC20_ABI = json.loads("""[
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "name": "",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        }
    ]""")

    bean = web3.eth.contract(address=BEAN_ERC20, abi=ERC20_ABI)
    bean3crv = web3.eth.contract(address=BEAN3CRV, abi=ERC20_ABI)
    dai = web3.eth.contract(address=DAI, abi=ERC20_ABI)
    usdc = web3.eth.contract(address=USDC, abi=ERC20_ABI)
    usdt = web3.eth.contract(address=USDT, abi=ERC20_ABI)
    threeCrv = web3.eth.contract(address=THREECRV, abi=ERC20_ABI)
    urBean = web3.eth.contract(address=URBEAN, abi=ERC20_ABI)
    urBean3Crv = web3.eth.contract(address=URBEAN3CRV, abi=ERC20_ABI)
    assets = [
        bean,
        bean3crv,
        dai,
        usdc,
        usdt,
        threeCrv,
        urBean,
        urBean3Crv
    ]
    decimals = [
        1e6,
        1e18,
        1e18,
        1e6,
        1e6,
        1e18,
        1e6,
        1e6
    ]

    #BCM multisig
    TEST_ADDRESS = '0x21DE18B6A8f78eDe6D16C50A167f6B222DC08DF7'

    # get list of all farmers: 
    sg = Subgrounds()
    beanstalk = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/cujowolf/beanstalk-dev')
    farmer = beanstalk.Query.farmers(
        first = 100000
    )

    # put farmer ID into DF
    df = sg.query_df([
    farmer.id
    ])
    #rename for ease
    df.rename(columns = {'farmers_id' : 'id'} ,inplace= True)

    # for each asset, we check each farmers allowance. If the allowance is 0, the funds at risk is 0.
    # If there is an allowance, we then check the external balance of the farmer (this is at risk)
    # If the allowance is lower than the balance of, the amount at risk is limited to the allowance


    for index, token in enumerate(assets): 
        amt_at_risk = []
        symbol = token.functions.symbol().call()
        for ind in df.index: 
            address = Web3.toChecksumAddress(df.iloc[ind]['id'])
            allowance = token.functions.allowance(address,BEANSTALK).call()
            balance_at_risk = 0
            if(allowance > 0):
                balance_at_risk = token.functions.balanceOf(TEST_ADDRESS).call()/decimals[index]
                if(balance_at_risk > 0):
                    balance_at_risk = allowance if balance_at_risk > allowance else balance_at_risk
            amt_at_risk.append(balance_at_risk)
        print(amt_at_risk)
        df[symbol] = amt_at_risk

if __name__ == "__main__":
    main()
            
